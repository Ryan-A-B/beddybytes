  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Sub "${AWS::StackName}-task"
      Memory: 512
      RequiresCompatibilities:
        - EC2
      ExecutionRoleArn: !Ref ExecutionRole
      TaskRoleArn: !Ref TaskRole
      # Volumes:
      ContainerDefinitions:
        - Name: api
          Image: !Ref Image
          Essential: True
          RestartPolicy:
            Enabled: True
          PortMappings:
            - ContainerPort: 9000
          Environment:
            - Name: COOKIE_DOMAIN
              Value: !Ref CookieDomain
            - Name: SERVER_ADDR
              Value: :9000
            - Name: FILE_EVENT_LOG_FOLDER_PATH
              Value: /opt/eventlog
            - Name: MAILER_IMPLEMENTATION
              Value: ses
            - Name: MAILER_SES_FROM
              Value: !Sub BeddyBytes <noreply@${EmailDomain}>
            - Name: MAILER_SES_APP_HOST
              Value: !Ref AppHost
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: MQTT_IMPLEMENTATION
              Value: aws_iot
            - Name: MQTT_BROKER
              Value: !Ref MQTTBroker
            - Name: MQTT_AWS_IOT_ROOT_CA_FILE
              Value: AmazonRootCA1.pem
            - Name: MQTT_AWS_IOT_CERT_FILE
              Value: certificate.crt
            - Name: MQTT_AWS_IOT_KEY_FILE
              Value: private_key.pem
          Secrets:
            - Name: ENCRYPTION_KEY
              ValueFrom: !Ref EncryptionKey
          DockerLabels:
            traefik.enable: "true"

            traefik.http.routers.{{.TraefikPrefix}}anonymous-token.rule: !Sub "Host(`${HostName}`) && Path(`/anonymous_token`) && Method(`POST`)"
            traefik.http.routers.{{.TraefikPrefix}}anonymous-token.entrypoints: "websecure"
            traefik.http.routers.{{.TraefikPrefix}}anonymous-token.tls: "true"
            traefik.http.routers.{{.TraefikPrefix}}anonymous-token.tls.certresolver: "letsencrypt"
            traefik.http.routers.{{.TraefikPrefix}}anonymous-token.middlewares: headers-cors@file,rate-limit-anonymous-token@file

            traefik.http.routers.{{.TraefikPrefix}}create-account.rule: !Sub "Host(`${HostName}`) && Path(`/accounts`) && Method(`POST`)"
            traefik.http.routers.{{.TraefikPrefix}}create-account.entrypoints: "websecure"
            traefik.http.routers.{{.TraefikPrefix}}create-account.tls: "true"
            traefik.http.routers.{{.TraefikPrefix}}create-account.tls.certresolver: "letsencrypt"
            traefik.http.routers.{{.TraefikPrefix}}create-account.middlewares: headers-cors@file,rate-limit-create-account@file

            traefik.http.routers.{{.TraefikPrefix}}api.rule: !Sub "Host(`${HostName}`)"
            traefik.http.routers.{{.TraefikPrefix}}api.entrypoints: "websecure"
            traefik.http.routers.{{.TraefikPrefix}}api.tls: "true"
            traefik.http.routers.{{.TraefikPrefix}}api.tls.certresolver: "letsencrypt"
            traefik.http.routers.{{.TraefikPrefix}}api.middlewares: headers-cors@file,rate-limit-api@file

  Service:
    Type: AWS::ECS::Service
    Properties:
      Cluster: !Ref BackendCluster
      DesiredCount: 1
      LaunchType: EC2
      TaskDefinition: !Ref TaskDefinition
      DeploymentConfiguration:
        MaximumPercent: 100
        MinimumHealthyPercent: 0

  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-execution-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: PullDockerImage
                Effect: Allow
                Action:
                  - ecr:GetAuthorizationToken
                  - ecr:BatchCheckLayerAvailability
                  - ecr:GetDownloadUrlForLayer
                  - ecr:BatchGetImage
                Resource: "*"
              - Sid: ReadSecrets
                Effect: Allow
                Action:
                  - secretsmanager:GetSecretValue
                Resource:
                  - !Ref EncryptionKey

  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub "${AWS::StackName}-task-policy"
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Sid: SendPasswordResetEmail
                Effect: Allow
                Action:
                  - ses:SendEmail
                Resource: !Sub arn:aws:ses:${AWS::Region}:${AWS::AccountId}:identity/${EmailIdentity}
                Condition:
                  StringEquals:
                    ses:FromAddress: !Sub noreply@${EmailDomain}

  EncryptionKey:
      Type: AWS::SecretsManager::Secret
      Properties:
        Name: !Sub ${AWS::StackName}-encryption-key
        GenerateSecretString:
          PasswordLength: 32

  APIDNSRecord:
    Type: AWS::Route53::RecordSet
    Properties:
      HostedZoneName: !Ref HostedZoneName
      Name: !Ref HostName
      Type: A
      TTL: 900
      ResourceRecords:
        - !Ref ElasticIP

  Thing:
    Type: AWS::IoT::Thing
    Properties:
      ThingName: !Sub ${AWS::StackName}-thing

  ThingCertificate:
    Type: AWS::IoT::Certificate
    Properties:
      Status: ACTIVE
      CertificateMode: DEFAULT
      CertificateSigningRequest: !Ref ThingCertificateSigningRequest

  ThingPrincipalAttachment:
    Type: AWS::IoT::ThingPrincipalAttachment
    Properties:
      Principal: !GetAtt ThingCertificate.Arn
      ThingName: !Ref Thing

  ThingPolicy:
    Type: AWS::IoT::Policy
    Properties:
      PolicyName: !Sub ${AWS::StackName}-thing-policy
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Action:
              - iot:Connect
              - iot:Publish
              - iot:Receive
              - iot:Subscribe
            Resource: "*" # TODO restrict topic to prefix?
  
  ThingPolicyPrincipalAttachment:
    Type: AWS::IoT::PolicyPrincipalAttachment
    Properties:
      Principal: !GetAtt ThingCertificate.Arn
      PolicyName: !Ref ThingPolicy

  # IoTCertificate:
  #   Type: AWS::CertificateManager::Certificate
  #   Properties:
  #     DomainName: !Ref MQTTHost
  #     ValidationMethod: DNS
  #     DomainValidationOptions:
  #       - DomainName: !Ref MQTTHost
  #         HostedZoneId: !Ref HostedZoneId

  # IoTCustomDomain:
  #   Type: AWS::IoT::DomainConfiguration
  #   Properties:
  #     DomainName: !Ref MQTTHost
  #     DomainConfigurationStatus: DISABLED
  #     ServerCertificateArns:
  #       - !Ref IoTCertificate